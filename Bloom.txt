import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.BitSet;

public class BloomFilter {
    private final int size; // Size of the Bloom filter (in bits)
    private final int numHashFunctions; // Number of hash functions
    private final BitSet bitSet; // Bit array to store the filter

    public BloomFilter(int size, int numHashFunctions) {
        this.size = size;
        this.numHashFunctions = numHashFunctions;
        this.bitSet = new BitSet(size);
    }

    public void add(String item) {
        for (int i = 0; i < numHashFunctions; i++) {
            int hash = getHash(item, i);
            int index = Math.abs(hash) % size;
            bitSet.set(index, true);
        }
    }

    public boolean contains(String item) {
        for (int i = 0; i < numHashFunctions; i++) {
            int hash = getHash(item, i);
            int index = Math.abs(hash) % size;
            if (!bitSet.get(index)) {
                return false;
            }
        }
        return true;
    }

    private int getHash(String item, int salt) {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            byte[] bytes = (item + salt).getBytes(StandardCharsets.UTF_8);
            byte[] hash = digest.digest(bytes);
            return bytesToInt(hash);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return 0;
        }
    }

    private int bytesToInt(byte[] bytes) {
        int result = 0;
        for (byte b : bytes) {
            result = (result << 8) | (b & 0xFF);
        }
        return result;
    }

    public static void main(String[] args) {
        int filterSize = 128; // Adjust the size according to your requirements
        int hashFunctions = 3; // The number of hash functions to use
        BloomFilter bloomFilter = new BloomFilter(filterSize, hashFunctions);

        // Add items to the Bloom filter
        String[] itemsToAdd = {"apple", "banana", "cherry", "date"};
        for (String item : itemsToAdd) {
            bloomFilter.add(item);
        }

        // Test membership
        String[] itemsToTest = {"apple", "banana", "cherry", "date", "elderberry"};
        for (String item : itemsToTest) {
            if (bloomFilter.contains(item)) {
                System.out.println(item + " may be in the set.");
            } else {
                System.out.println(item + " is definitely not in the set.");
            }
        }
    }
}

javac fine_name.java // compile

java file_name // run 

